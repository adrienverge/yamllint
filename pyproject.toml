[project]
name = "yamllint"
description = "A linter for YAML files."
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.9"
license = "GPL-3.0-or-later"
authors = [{name = "Adrien VergÃ©"}]
keywords = ["yaml", "lint", "linter", "syntax", "checker"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "pathspec >= 0.5.3",
    "pyyaml",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "doc8",
    "flake8",
    "flake8-import-order",
    "rstcheck[sphinx]",
    "ruff",
    "sphinx",
]

[project.scripts]
yamllint = "yamllint.cli:run"

[project.urls]
homepage = "https://github.com/adrienverge/yamllint"
repository = "https://github.com/adrienverge/yamllint"
documentation = "https://yamllint.readthedocs.io"

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 61"]

[tool.setuptools]
packages = ["yamllint", "yamllint.conf", "yamllint.rules"]

[tool.setuptools.package-data]
yamllint = ["conf/*.yaml"]

[tool.setuptools.dynamic]
version = {attr = "yamllint.__version__"}

[tool.ruff]
line-length = 79

[tool.ruff.lint]
extend-select = [
    "B",
    "C4",
    "EXE",
    "FA",
    "ISC",
    "LOG",
    "G",
    "PIE",
    "PYI",
    "SIM",
    "FLY",
    "I",
    "PERF",
    "W",
    "PGH",
    "PLC",
    "PLE",
    "UP",
    "FURB",
    "RUF",
]
ignore = [
    "B028",     # No explicit `stacklevel` keyword argument found
    "SIM102",   # Use a single `if` statement instead of nested `if` statements
    "SIM103",   # Return the negated condition directly
    "SIM105",   # Use `contextlib.suppress(KeyError)` instead of `try`-`except`-`pass`
    "SIM108",   # Use ternary operator instead of `if`-`else`-block
    "SIM114",   # Combine `if` branches using logical `or` operator
    "SIM117",   # Use a single `with` statement with multiple contexts
    "FURB105",  # Unnecessary empty string passed to `print`
    "RUF001",   # String contains ambiguous Unicode characters
    "RUF002",   # Docstring contains ambiguous Unicode characters
    "RUF003",   # Comment contains ambiguous Unicode characters
    "RUF005",   # Consider unpacking instead of concatenation
    "RUF100",   # Unused `noqa` directive
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-third-party = ["tests"]
